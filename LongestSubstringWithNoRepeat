class Solution {
    static final int NO_OF_CHARS = 256; 
    
    public int lengthOfLongestSubstring(String s) {
        
        //char[] stringToCharArray = testString.toCharArray();
        int n = s.length();
        int cur_length = 1;
        int max_length = 1;
        int previousIndex, i;
        int visited[] = new int[NO_OF_CHARS]; 

        /* Initialize the visited array as -1, -1 is  
         used to indicate that character has not been  
         visited yet. */
        for (i = 0; i < NO_OF_CHARS; i++) { 
            visited[i] = -1; 
        } 
          
        /* Mark first character as visited by storing the 
             index of first   character in visited array. */
        visited[s.charAt(0)] = 0; 
          
        /* Start from the second character. First character is 
           already processed (cur_len and max_len are initialized 
         as 1, and visited[str[0]] is set */
        for(i = 1; i < n; i++) 
        { 
            previousIndex = visited[s.charAt(i)]; 
              
            /* If the current character is not present in 
           the already processed substring or it is not 
              part of the current NRCS, then do cur_len++ */
            if(previousIndex == -1 || i - cur_length > previousIndex) 
                cur_length++; 
              
            /* If the current character is present in currently 
               considered NRCS, then update NRCS to start from 
               the next character of previous instance. */
            else
            { 
                /* Also, when we are changing the NRCS, we 
                   should also check whether length of the 
                   previous NRCS was greater than max_len or 
                   not.*/
                if(cur_length > max_length) 
                    max_length = cur_length; 
                  
                cur_length = i - previousIndex; 
            } 
              
             // update the index of current character 
            visited[s.charAt(i)] = i; 
        } 
          
        // Compare the length of last NRCS with max_len and 
        // update max_len if needed 
        if(cur_length > max_length) 
            max_length = cur_length; 
          
        return max_length; 
    } 
        
        
    }
